#!/bin/python3
from sys import argv
import numpy as np
import cv2 as cv
import csv
import statistics
import math
def make_csv(contours):
    with open('text-tilted-data.csv', 'a') as csvfile:
        writer = csv.writer(csvfile)
        # writer.writerow(("aspect_ratio", "extent", "solidity", "equi_diameter", "angle", "defect_height/area", "defect_rel_position", "circleness", "hull_circleness"))
        data_extractor = (get_data(contour) for contour in contours)
        writer.writerows(data_extractor)

def weird_division(n, d):
    return n / d if d else None

def cat(hyp, a):
    return (hyp**2-a**2)**0.5

def get_data(cnt):
    x,y,w,h = cv.boundingRect(cnt)
    aspect_ratio = weird_division(float(w), h)
    area = cv.contourArea(cnt)
    perimeter = cv.arcLength(cnt, True)
    circleness = weird_division(area, perimeter)
    rect_area = w*h
    extent = weird_division(float(area), rect_area)
    hull = cv.convexHull(cnt, returnPoints=False)
    hull_points = cv.convexHull(cnt)
    try:
        defects = cv.convexityDefects(cnt, hull)
        defect_height = weird_division(statistics.mean(map(lambda x:x[0][3], defects)),area)
        defect_rel_position = statistics.mean(map(lambda x:cat(math.dist(cnt[x[0][0]][0],cnt[x[0][2]][0]),x[0][3]/256)/cat(math.dist(cnt[x[0][1]][0],cnt[x[0][2]][0]),x[0][3]/256), defects))
    except:
        defects = 0
        defect_height = 0
        defect_rel_position = 0
    hull_area = cv.contourArea(hull_points)
    hull_perimeter = cv.arcLength(hull_points, True)
    hull_circleness = weird_division(hull_area, hull_perimeter)
    solidity = weird_division(float(area), hull_area)
    equi_diameter = np.sqrt(4*area/np.pi)
    (x,y),(MA,ma),angle = cv.fitEllipse(cnt)
    return (aspect_ratio, extent, solidity, equi_diameter, angle, defect_height, defect_rel_position, circleness, hull_circleness)


def read(image_path):
    image = cv.imread(image_path, cv.IMREAD_GRAYSCALE)
    image_color = cv.imread(image_path, cv.IMREAD_COLOR)
    return (image, image_color)

def blur(image):
    img_blur = cv.GaussianBlur(image, (9,9), 0)
    return img_blur

def canny(image):
    lower = 80
    upper = 240
    edge = cv.Canny(image=image, threshold1=lower,threshold2=upper)
    return edge

def erode(image):
    kernel = np.ones((3,3),np.uint8)
    eroded = cv.erode(image, kernel, iterations=1)
    return eroded

# create white canvas
def contour(image):
    height, width = image.shape[:2]
    blank_image = np.zeros((height,width,1), np.uint8)
    blank_image.fill(255)
    contours,_ = cv.findContours(image, cv.RETR_LIST, cv.CHAIN_APPROX_NONE)
    contours = list(filter(lambda x:len(x)>4, contours))
    make_csv(contours)
    im_in = cv.drawContours(blank_image, contours, -1, (0, 0, 0), 1)
    # cv.imwrite('contour.jpg', im_in)
    return im_in

if __name__ == "__main__":
    if len(argv) != 2:
        print('expected path to image')
        exit(-1)
    image_path = argv[1]
    image, image_color = read(image_path)
    im_blur = blur(image)
    can = canny(im_blur)
    # cv.imwrite('canny.jpg', can)
    image = contour(can)
